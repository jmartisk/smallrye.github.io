<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://www.smallrye.io/smallrye.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.smallrye.io/smallrye.github.io/" rel="alternate" type="text/html" /><updated>2021-01-18T11:34:20+00:00</updated><id>https://www.smallrye.io/smallrye.github.io/feed.xml</id><title type="html">SmallRye</title><subtitle>SmallRye is a project to share and collaborate on implementing specifications that are part of Eclipse MicroProfile.</subtitle><entry><title type="html">Fault Tolerance 4.3.1</title><link href="https://www.smallrye.io/smallrye.github.io/blog/fault-tolerance-4-3-1/" rel="alternate" type="text/html" title="Fault Tolerance 4.3.1" /><published>2020-09-29T13:00:00+00:00</published><updated>2020-09-29T13:00:00+00:00</updated><id>https://www.smallrye.io/smallrye.github.io/blog/fault-tolerance-4-3-1</id><content type="html" xml:base="https://www.smallrye.io/smallrye.github.io/blog/fault-tolerance-4-3-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/4.3.1&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 4.3.1.
This is a small release with a couple of bug fixes and one API deprecation.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 4.3.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the previous release, we introduced an experimental API for observing circuit breaker state changes.
The &lt;code&gt;CircuitBreakerStateChanged&lt;/code&gt; event type is now deprecated and will be removed in a subsequent release.
At the same time, we will introduce a new API for accessing circuit breaker maintenance features: observing its current state and resetting to the initial state.
If you want to know more, feel free to watch &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues/280&quot;&gt;issue #280&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, to slightly improve quality of life, starting with this release, SmallRye Fault Tolerance will log its version number during boot.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">SmallRye Config 1.9 Released</title><link href="https://www.smallrye.io/smallrye.github.io/blog/smallrye-config-1-9/" rel="alternate" type="text/html" title="SmallRye Config 1.9 Released" /><published>2020-09-24T12:00:00+00:00</published><updated>2020-09-24T12:00:00+00:00</updated><id>https://www.smallrye.io/smallrye.github.io/blog/smallrye-config-1-9</id><content type="html" xml:base="https://www.smallrye.io/smallrye.github.io/blog/smallrye-config-1-9/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In SmallRye Config 1.9 we continue our innovation and experimentation model, by bringing additional features and
enhancements to the API. This release introduces the following big changes:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;config_mappings&quot;&gt;Config Mappings&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Config Mapping provides a way to group multiple configuration properties into a single cohesive API. A Config Mapping
requires a simple interface with minimal metadata configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ConfigMapping(prefix = &quot;server&quot;)
interface Server {
    String host();

    int port();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Server&lt;/code&gt; interface retrieves and maps configuration properties with the name &lt;code&gt;server.host&lt;/code&gt; into the
&lt;code&gt;Server.host()&lt;/code&gt; and &lt;code&gt;server.port&lt;/code&gt; into &lt;code&gt;Server.port()&lt;/code&gt; method. The configuration property name to lookup
builds from the &lt;code&gt;@ConfigMapping&lt;/code&gt; annotation prefix and the method name with &lt;code&gt;.&lt;/code&gt; (dot) as the separator. The
&lt;code&gt;@ConfigMapping&lt;/code&gt; annotation is used to auto-discover and register these mapping interfaces in a CDI aware environment.
In non-CDI environments, register the Config Mapping via &lt;code&gt;SmallRyeConfigBuilder#withMapping&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To retrieve such Config Mapping, a simple &lt;code&gt;@Inject&lt;/code&gt; in any CDI aware bean is enough:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@Inject
Server server;

void businessMethod() {
    String host = server.host();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To retrieve the Config Mapping in non-CDI environments use the API
&lt;code&gt;io.smallrye.config.SmallRyeConfig#getConfigMapping&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;SmallRyeConfig config = (SmallRyeConfig) ConfigProvider.getConfig();
Server server = config.getConfigMapping(Server.class);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, Config Mappings also support:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Automatic conversion of the configuration type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nested Config Mapping groups.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Validate if configuration properties exist at the startup.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;Optional&lt;/code&gt;, and primitive types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@WithName&lt;/code&gt; to override the property name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@WithConverter&lt;/code&gt; to override the converter to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@WithDefault&lt;/code&gt; to set the default value if none is found in the config sources.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Combining all of these features, we can write a Config Mapping that looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ConfigMapping(prefix = &quot;server&quot;)
public interface Server {
    String host();

    int port();

    @WithConverter(DurationConverter.class)
    Duration timeout();

    @WithName(&quot;io-threads&quot;)
    int threads();

    Map&amp;lt;String, String&amp;gt; form();

    Optional&amp;lt;Ssl&amp;gt; ssl();

    Optional&amp;lt;Proxy&amp;gt; proxy();

    Log log();

    interface Ssl {
        int port();

        String certificate();

        @WithDefault(&quot;TLSv1.3,TLSv1.2&quot;)
        List&amp;lt;String&amp;gt; protocols();
    }

    interface Proxy {
        boolean enable();
    }

    interface Log {
        @WithDefault(&quot;false&quot;)
        boolean enabled();

        @WithDefault(&quot;.log&quot;)
        String suffix();

        @WithDefault(&quot;true&quot;)
        boolean rotate();

        @WithDefault(&quot;COMMON&quot;)
        Pattern pattern();

        enum Pattern {
            COMMON,
            SHORT,
            COMBINED,
            LONG;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For additional information, check out our documentation about
&lt;a href=&quot;https://smallrye.io/docs/smallrye-config/mapping/mapping.html&quot;&gt;Config Mappings&lt;/a&gt; and the example in the
&lt;a href=&quot;https://github.com/smallrye/smallrye-config/tree/master/examples/mapping&quot; class=&quot;bare&quot;&gt;https://github.com/smallrye/smallrye-config/tree/master/examples/mapping&lt;/a&gt; SmallRye Config Github repo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In MicroProfile Config 2.0, an initial version for this feature will be available. It doesn&amp;#8217;t support all the features
implemented in SmallRye Config, but the plan is to keep evolving and add more functionality based on the feedback of
the community. You can read more about it
&lt;a href=&quot;https://github.com/eclipse/microprofile-config/blob/master/spec/src/main/asciidoc/configexamples.asciidoc&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configurable_config_sources&quot;&gt;Configurable Config Sources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A highly requested feature is the ability to configure custom Config Sources, meaning it should be possible to
retrieve configuration values from other sources before building our own. Take for instance a Database based Config
Source. Such a source requires additional configurations like URL, username, and password to connect to the database.
Where do we set these configurations?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new &lt;code&gt;ConfigSourceFactory&lt;/code&gt; API provides a context with access to the currently available configuration. With a
&lt;code&gt;ConfigSourceFactory&lt;/code&gt;, it is possible to bootstrap a &lt;code&gt;ConfigSource&lt;/code&gt; that configures itself with other sources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ConfigSourceFactory&lt;/code&gt; requires the implementation of a single method
&lt;code&gt;ConfigSource getConfigSource(ConfigSourceContext context)&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@Override
public class ConfigMapConfigSourceFactory implements ConfigSourceFactory {
    @Override
    public ConfigSource getConfigSource(final ConfigSourceContext context) {
        final ConfigValue value = context.getValue(&quot;config.map.dir.source&quot;);
        if (value == null || value.getValue() == null) {
            throw new IllegalArgumentException(&quot;CONFIG_MAP_DIR_SOURCE not defined&quot;);
        }

        return new FileSystemConfigSource(value.getValue());
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The provided &lt;code&gt;ConfigSourceContext&lt;/code&gt; may call a single method &lt;code&gt;ConfigValue getValue(String name)&lt;/code&gt;. This method lookups
configuration names in all sources already initialized by the &lt;code&gt;Config&lt;/code&gt; even if they have a lower priority than the one
defined in the &lt;code&gt;ConfigSourceFactory&lt;/code&gt;. A`ConfigSource` produced by a &lt;code&gt;ConfigSourceFactory&lt;/code&gt; is not taken into account to
configure other sources produced by lower priority &lt;code&gt;ConfigSourceFactory&lt;/code&gt;. To register a &lt;code&gt;ConfigSourceFactory&lt;/code&gt; use the
standard Java &lt;code&gt;ServiceLoader&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For additional information, check out our documentation about
&lt;a href=&quot;https://smallrye.io/docs/smallrye-config/config-sources/config-sources.html#_config_source_factory&quot;&gt;Config Mappings&lt;/a&gt; and
the example in the
&lt;a href=&quot;https://github.com/smallrye/smallrye-config/tree/master/examples/configmap&quot; class=&quot;bare&quot;&gt;https://github.com/smallrye/smallrye-config/tree/master/examples/configmap&lt;/a&gt; SmallRye Config Github repo.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;default_values&quot;&gt;Default Values&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Right now, the only way to set a default value for a configuration to use the
&lt;code&gt;org.eclipse.microprofile.config.inject.ConfigProperty#defaultValue&lt;/code&gt;. This has a few limitations. It doesn&amp;#8217;t work in the
programmatic lookup or if we are using the annotation and have to inject the same property in multiple places,
we need to duplicate the default value in each injection point. Adding the configuration values into
&lt;code&gt;microprofile-config.properties&lt;/code&gt; to act as a default is not optimal either, since they may override lower priority
custom sources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Config adds a simple API to set such default values, with
&lt;code&gt;SmallRyeConfigBuilder#withDefaultValue(String name, String value)&lt;/code&gt; or
&lt;code&gt;SmallRyeConfigBuilder#withDefaultValue(Map&amp;lt;String, String&amp;gt; defaultValues)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Default values for any configuration name can then be supplied with these APIs. SmallRye Config will only fallback to
these default if no value is found in the available sources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Default values API also supports name patterns. For instance a &lt;code&gt;withDefaultValue(&quot;smallrye.*&quot;, &quot;1234&quot;)&lt;/code&gt; provides
default values for any configuration name with the prefix &lt;code&gt;smallrye&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the new features detailed here are experimental. The team is happy with them, and they had careful consideration
when designed. We cannot guarantee that they won&amp;#8217;t suffer any changes in the next few releases, especially considering
that the SmallRye team is also pushing to have these added to the MicroProfile Config specification, which may require
some changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This shouldn&amp;#8217;t discourage developers to use these new features. We believe these add a lot of utility and improve the
developer experience when setting configurations in applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A handful of other small improvements and bugs fixes are also included in this release. Check them out in the
&lt;a href=&quot;https://github.com/smallrye/smallrye-config/releases/tag/1.9.0&quot;&gt;Release Notes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please, feel free to drop us any feedback to the &lt;a href=&quot;mailto:smallrye@googlegroups.com&quot;&gt;SmallRye Mailing List&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;additional_resources&quot;&gt;Additional Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/smallrye/smallrye-config/&quot;&gt;GitHub Repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/smallrye/smallrye-config/releases/tag/1.9.0&quot;&gt;Release Notes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://smallrye.io/docs/smallrye-config/index.html&quot;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Roberto Cortez</name><email>radcortez@yahoo.com</email></author><category term="microprofile" /><category term="smallrye" /><category term="config" /></entry><entry><title type="html">Fault Tolerance 4.2 &amp;amp; 4.3</title><link href="https://www.smallrye.io/smallrye.github.io/blog/fault-tolerance-4-2-and-4-3/" rel="alternate" type="text/html" title="Fault Tolerance 4.2 &amp;amp; 4.3" /><published>2020-05-29T11:00:00+00:00</published><updated>2020-05-29T11:00:00+00:00</updated><id>https://www.smallrye.io/smallrye.github.io/blog/fault-tolerance-4-2-and-4-3</id><content type="html" xml:base="https://www.smallrye.io/smallrye.github.io/blog/fault-tolerance-4-2-and-4-3/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce two new releases of SmallRye Fault Tolerance: 4.2.1 and 4.3.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4_2_1&quot;&gt;4.2.1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release includes bugfixes and component updates and is safe to use for everyone who uses Fault Tolerance 4.1.0, 4.1.1 and 4.2.0.
The 4.2.0 release happened a few weeks ago and didn&amp;#8217;t contain anything but bugfixes.
With 4.2.1, we now use MicroProfile Fault Tolerance 2.1.1, which includes some TCK fixes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is one small feature in the 4.2.1 release, which is interesting for integrators.
If you integrate SmallRye Fault Tolerance and provide your own &lt;code&gt;ExecutorFactory&lt;/code&gt;, you can now inherit from the &lt;code&gt;DefaultExecutorFactory&lt;/code&gt; class and override the &lt;code&gt;threadFactory&lt;/code&gt; method.
This allows customizing the most important property: how do the thread pools create their threads.
All the other thread pool settings will stay at the SmallRye Fault Tolerance defaults.
Of course, you can still provide a your own &lt;code&gt;ExecutorFactory&lt;/code&gt; and customize everything.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4_3_0&quot;&gt;4.3.0&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release builds on 4.2.1 and adds one new feature: you can now observe when circuit breakers change their state.
Let&amp;#8217;s first take a look at the code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s say we have a method &lt;code&gt;doWork&lt;/code&gt; which is guarded by a circuit breaker, presumably because it reaches out to some external service:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
public class MyService {
    @CircuitBreaker(...)
    public void doWork() {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, there are metrics for how often the circuit breaker trips etc., but you might want to observe when the circuit breaker state changes directly.
With SmallRye Fault Tolerance 4.3.0, that is now possible: circuit breaker state changes are emitted as CDI events.
With an event observer, it&amp;#8217;s easy to react to circuit breaker state changing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
public class MyServiceObserver {
    public void onStateChange(@Observes CircuitBreakerStateChanged event) {
        if (MyService.class.equals(event.clazz) &amp;amp;&amp;amp; &quot;doWork&quot;.equals(event.method.getName())) {
            System.out.println(&quot;!!! circuit breaker is now &quot; + event.targetState);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that in this example, we make one simplifying assumption: that the &lt;code&gt;MyService&lt;/code&gt; class only has &lt;em&gt;one&lt;/em&gt; method called &lt;code&gt;doWork&lt;/code&gt;.
If it had multiple &lt;code&gt;doWork&lt;/code&gt; methods, each having different signature and each having its own circuit breaker, we would have to distinguish between them in the observer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;CircuitBreakerStateChanged&lt;/code&gt; event type includes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the bean &lt;code&gt;clazz&lt;/code&gt;, as &lt;code&gt;java.lang.Class&lt;/code&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the guarded &lt;code&gt;method&lt;/code&gt;, as &lt;code&gt;java.lang.reflect.Method&lt;/code&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the &lt;code&gt;targetState&lt;/code&gt; of the circuit breaker, as a simple enum &lt;code&gt;CircuitBreakerState&lt;/code&gt; with 3 values: &lt;code&gt;CLOSED&lt;/code&gt;, &lt;code&gt;OPEN&lt;/code&gt; and &lt;code&gt;HALF_OPEN&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;experimental_api&quot;&gt;Experimental API&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;CircuitBreakerStateChanged&lt;/code&gt; and &lt;code&gt;CircuitBreakerState&lt;/code&gt; classes are meant for direct consumption by end users.
They are considered an experimental API, because we&amp;#8217;re trying to find out how to best provide this feature.
This also means that breaking changes are very much possible, when we learn how to improve the API.
Your feedback is very important here!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you use a runtime such as Thorntail or Quarkus, they should provide you the correct dependency automatically, after they update to SmallRye Fault Tolerance 4.3.0. If you use SmallRye Fault Tolerance directly, you should note that these classes are located in a new artifact: &lt;code&gt;smallrye-fault-tolerance-api&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">SmallRye Config 1.8 Released</title><link href="https://www.smallrye.io/smallrye.github.io/blog/smallrye-config-1-8/" rel="alternate" type="text/html" title="SmallRye Config 1.8 Released" /><published>2020-05-22T12:00:00+00:00</published><updated>2020-05-22T12:00:00+00:00</updated><id>https://www.smallrye.io/smallrye.github.io/blog/smallrye-config-1-8</id><content type="html" xml:base="https://www.smallrye.io/smallrye.github.io/blog/smallrye-config-1-8/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Config version 1.8 was released a few days ago.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The latest version of SmallRye Config introduced a few experimental changes to enhance the API and to make SmallRye
Config more extensible. One of the experimental changes is the new interceptor model, to intercept the lookup of a
configuration value.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the_configsourceinterceptor&quot;&gt;The ConfigSourceInterceptor&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ConfigSourceInterceptor&lt;/code&gt; allows to intercept the resolution of a configuration name before the &lt;code&gt;Config&lt;/code&gt; resolves
the configuration value and before any conversion taking place. This is useful to implement features like
property expansion or configuration profiles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Implementations of &lt;code&gt;ConfigSourceInterceptor&lt;/code&gt; are loaded via the &lt;code&gt;java.util.ServiceLoader&lt;/code&gt; mechanism and can be
registered by providing a resource named &lt;code&gt;META-INF/services/io.smallrye.config.ConfigSourceInterceptor&lt;/code&gt;, which
contains the fully qualified &lt;code&gt;ConfigSourceInterceptor&lt;/code&gt; implementation class name as its content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A single method must be implemented, &lt;code&gt;ConfigValue getValue(ConfigSourceInterceptorContext context, String name)&lt;/code&gt;. The
&lt;code&gt;ConfigSourceInterceptorContext&lt;/code&gt; is used to proceed with the interceptor chain. The chain can be short-circuited by
returning an instance of &lt;code&gt;ConfigValue&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;public interface ConfigSourceInterceptor extends Serializable {
    ConfigValue getValue(ConfigSourceInterceptorContext context, String name);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ConfigValue&lt;/code&gt; objects hold information about the key name, value, config source origin, and ordinal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, the &lt;code&gt;ConfigSourceInterceptor&lt;/code&gt; may also intercept resolution of configuration names or configuration
values with the methods &lt;code&gt;Iterator&amp;lt;String&amp;gt; iterateNames(ConfigSourceInterceptorContext context)&lt;/code&gt; and
&lt;code&gt;Iterator&amp;lt;ConfigValue&amp;gt; iterateValues(ConfigSourceInterceptorContext context)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Interceptor chain applies before any conversion takes place.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the Interceptor API, it becomes trivial to implement a logging mechanism and to find out which &lt;code&gt;ConfigSource&lt;/code&gt;
loaded the resolved config:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;public class LoggingConfigSourceInterceptor implements ConfigSourceInterceptor {
    private static final Logger LOG = Logger.getLogger(&quot;io.smallrye.config&quot;);

    @Override
    public ConfigValue getValue(final ConfigSourceInterceptorContext context, final String name) {
        final ConfigValue configValue = context.proceed(name);
        final String key = configValue.getName();
        final String value = configValue.getValue();
        final String configSource = configValue.getConfigSourceName();

        LOG.infov(&quot;The key {0} was loaded from {1} with the value {2}&quot;, key, configSource, value);

        return configValue;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Config does ship with its own logging interceptor, so you don&amp;#8217;t need to implement one.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;built_in_interceptors&quot;&gt;Built-In Interceptors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Config provides the following built-in interceptors to expand its feature set:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RelocateConfigSourceInterceptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ProfileConfigSourceInterceptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ExpressionConfigSourceInterceptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FallbackConfigSourceInterceptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LoggingConfigSourceInterceptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SecretKeyConfigSourceInterceptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Not every interceptor is registered by default. Only the &lt;code&gt;ProfileConfigSourceInterceptor&lt;/code&gt;,
&lt;code&gt;ExpressionConfigSourceInterceptor&lt;/code&gt; and &lt;code&gt;SecretKeyConfigSourceInterceptor&lt;/code&gt; are added on new instances of &lt;code&gt;Config&lt;/code&gt;.
Other interceptors require manual registration via the &lt;code&gt;ServiceLoader&lt;/code&gt; mechanism.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To learn more about all the built-in interceptors, please refer to the
&lt;a href=&quot;https://smallrye.io/docs/smallrye-config/interceptors/interceptors.html#_built_in_interceptors&quot;&gt;documentation page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;expression_expansion&quot;&gt;Expression Expansion&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ExpressionConfigSourceInterceptor&lt;/code&gt; provides expression expansion on configuration values. An expression string is
a mix of plain strings and expression segments, which are wrapped into &lt;code&gt;${ &amp;#8230;&amp;#8203; }&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, consider the following configuration properties file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot; class=&quot;language-properties hljs&quot;&gt;my.prop=1234
expression=${my.prop}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then the &lt;code&gt;expression&lt;/code&gt; configuration will be resolved and expanded to the value &lt;code&gt;1234&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, the expression expansion engine supports the following segments:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;${expression:value}&lt;/code&gt; - Provides a default value after the &lt;code&gt;:&lt;/code&gt; if the expansion doesn&amp;#8217;t find a value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;${my.prop${compose}}&lt;/code&gt; - Composed expressions. Inner expressions are resolved first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;${my.prop}${my.prop}&lt;/code&gt; - Multiple expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configuration_profiles&quot;&gt;Configuration Profiles&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ProfileConfigSourceInterceptor&lt;/code&gt; allows multiple configurations with the same name and selects them via
a profile property.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To be able to set properties with the same name, each property needs to be prefixed with &lt;code&gt;%&lt;/code&gt; followed by the profile
name and a dot:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot; class=&quot;language-properties hljs&quot;&gt;my.prop=1234
%dev.my.prop=5678&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lookup is always performed with the &lt;code&gt;my.prop&lt;/code&gt; property name. To use the profile &lt;code&gt;dev&lt;/code&gt;, the configuration
&lt;code&gt;smallrye.config.profile=dev&lt;/code&gt; has to be set in any valid &lt;code&gt;ConfigSource&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When looking up the property &lt;code&gt;my.prop&lt;/code&gt; with the &lt;code&gt;dev&lt;/code&gt; profile active, the value is &lt;code&gt;5678&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Only one profile can be active at any given time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;api_enhancements&quot;&gt;API Enhancements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aside from interceptors, a few additional API enhancements shipped with the latest version of SmallRye Config:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ConfigValue&lt;/code&gt; - The ConfigValue is a metadata object that holds additional information after the lookup of a
configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ConfigValueConfigSource&lt;/code&gt; - Extends the original &lt;code&gt;ConfigSource&lt;/code&gt; to expose methods that return a &lt;code&gt;ConfigValue&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SmallRyeConfigBuilder#withSecretKeys&lt;/code&gt; - Hide configuration properties that contain passwords or other kinds of
secrets to prevent accidental exposure of such values.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the new features detailed here are experimental. The team is happy with them, and they had careful consideration
when designed. We cannot guarantee that they won&amp;#8217;t suffer any changes in the next few releases, especially considering
that the SmallRye team is also pushing to have these added to the MicroProfile Config specification, which may require
some changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This shouldn&amp;#8217;t discourage developers to use these new features. We believe these add a lot of utility and improve the
developer experience regarding configuration of applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please, feel free to drop us any feedback in the &lt;a href=&quot;mailto:smallrye@googlegroups.com&quot;&gt;SmallRye Mailing List&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;additional_resources&quot;&gt;Additional Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/smallrye/smallrye-config/releases/tag/1.8.0&quot;&gt;Release Notes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://smallrye.io/docs/smallrye-config/index.html&quot;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Roberto Cortez</name><email>radcortez@yahoo.com</email></author><category term="microprofile" /><category term="smallrye" /><category term="config" /></entry><entry><title type="html">Health Groups</title><link href="https://www.smallrye.io/smallrye.github.io/blog/health-groups/" rel="alternate" type="text/html" title="Health Groups" /><published>2020-05-07T12:00:00+00:00</published><updated>2020-05-07T12:00:00+00:00</updated><id>https://www.smallrye.io/smallrye.github.io/blog/health-groups</id><content type="html" xml:base="https://www.smallrye.io/smallrye.github.io/blog/health-groups/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are reading this blog, you have probably already heard about
&lt;a href=&quot;https://github.com/eclipse/microprofile-health&quot;&gt;Eclipse MicroProfile Health&lt;/a&gt;
technology. In this article, we will introduce a new experimental extension to
MicroProfile Health 2.2 called Health groups.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of the source code that we will present in this article is available at this
GitHub repository &lt;a href=&quot;https://github.com/xstefank/health-groups&quot; class=&quot;bare&quot;&gt;https://github.com/xstefank/health-groups&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;microprofile_2_2_health_checks&quot;&gt;MicroProfile 2.2 health checks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you know, to define a health check procedure in MicroProfile Health you need
something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;package io.xstefank;

import org.eclipse.microprofile.health.HealthCheck;
import org.eclipse.microprofile.health.HealthCheckResponse;
import org.eclipse.microprofile.health.Readiness;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped // 1. CDI scope
@Readiness         // 2. Qualifier (Readiness, Liveness, Health)
public class ReadinessHealthCheck implements HealthCheck {   // 3. implements HealthCheck interface

    @Override
    public HealthCheckResponse call() {
        return HealthCheckResponse.up(ReadinessHealthCheck.class.getSimpleName());
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So just to recap, to define a health check your class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;needs to be a CDI bean&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;needs to have one of the health qualifiers (Readiness, Liveness, or deprecated Health)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;must implement the HealthCheck interface&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is everything that you can use in MicroProfile 2.2. But what if you have a
use case that doesn&amp;#8217;t fall into one of Readiness or Liveness categories? The answer
is custom health groups.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;health_groups&quot;&gt;Health Groups&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Health 2.2.0 (already included in Quarkus 1.4.0) comes with a new addition to this API
called health groups. A health group is basically a custom group of health check
procedures that the user defines based on individual needs. As you probably noticed,
Readiness and Liveness health checks already represent two predefined health groups.
With the health groups feature you can define as many additional health check groups
as you need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;defining_a_health_group&quot;&gt;Defining a health Group&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To define a health group you need only to declare at least one health check
procedure that belongs to the health group:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;package io.xstefank;

import io.smallrye.health.HealthGroup;
import org.eclipse.microprofile.health.HealthCheck;
import org.eclipse.microprofile.health.HealthCheckResponse;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
@HealthGroup(&quot;custom-group-1&quot;)
public class CustomGroup1Check implements HealthCheck {

    @Override
    public HealthCheckResponse call() {
        return HealthCheckResponse.up(CustomGroup1HC.class.getSimpleName());
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So the only difference now is the change of the qualifier for which we now use
&lt;code&gt;io.smallrye.health.HealthGroup&lt;/code&gt;. This qualifier takes a string argument
representing the name of the health group. This is all that needs to be done
to define a new custom health group and a health check procedure that belongs to it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;accessing_custom_health_groups&quot;&gt;Accessing custom health groups&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Accessing the custom health groups is done a similar manner to the original
MicroProfile Health 2.2 health invocations. The URL to access a custom group is
&lt;code&gt;HOST:PORT/health/group/{group-name}&lt;/code&gt;. This will return all health check procedures
belonging to the groups &lt;code&gt;{group-name}&lt;/code&gt;. You can also find all health check
procedures that belong to any of the custom defined health group by accessing
&lt;code&gt;HOST:PORT/health/group&lt;/code&gt;. Here is a summary of endpoints exposed in Quarkus
1.4.0:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Path&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Health checks&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;/health&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@Readiness, @Liveness, @Health&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;/health/ready&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@Readiness&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;/health/live&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@Liveness&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;/health/group&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;all @HealthGroup(*)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;/health/groups/group-name&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@HealthGroup(&quot;group-name&quot;)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;combining_different_health_groups&quot;&gt;Combining different health groups&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You are allowed to use more than one qualifier on any health check procedure that
you define. For instance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;package io.xstefank;

import io.smallrye.health.HealthGroup;
import org.eclipse.microprofile.health.HealthCheck;
import org.eclipse.microprofile.health.HealthCheckResponse;
import org.eclipse.microprofile.health.Readiness;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
@HealthGroup(&quot;custom-group-1&quot;)
@HealthGroup(&quot;custom-group-2&quot;)
@Readiness
public class CustomGroup2ReadinessCheck implements HealthCheck {

    @Override
    public HealthCheckResponse call() {
        return HealthCheckResponse.up(CustomGroup2ReadinessCheck.class.getSimpleName());
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This procedure will now be available in &lt;code&gt;custom-group-1&lt;/code&gt;, &lt;code&gt;custom-group-2&lt;/code&gt; and the
&lt;code&gt;readiness&lt;/code&gt; groups.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;/health/group&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;json&quot; class=&quot;language-json hljs&quot;&gt;{
    &quot;checks&quot;: [
        {
            &quot;name&quot;: &quot;CustomGroup1Check&quot;,
            &quot;status&quot;: &quot;UP&quot;
        },
        {
            &quot;name&quot;: &quot;CustomGroup2ReadinessCheck&quot;,
            &quot;status&quot;: &quot;UP&quot;
        }
    ],
    &quot;status&quot;: &quot;UP&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;/health/group/custom-group-1&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;json&quot; class=&quot;language-json hljs&quot;&gt;{
    &quot;checks&quot;: [
        {
            &quot;name&quot;: &quot;CustomGroup1Check&quot;,
            &quot;status&quot;: &quot;UP&quot;
        },
        {
            &quot;name&quot;: &quot;CustomGroup2ReadinessCheck&quot;,
            &quot;status&quot;: &quot;UP&quot;
        }
    ],
    &quot;status&quot;: &quot;UP&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;/health/group/custom-group-2&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;json&quot; class=&quot;language-json hljs&quot;&gt;{
    &quot;checks&quot;: [
        {
            &quot;name&quot;: &quot;CustomGroup2ReadinessCheck&quot;,
            &quot;status&quot;: &quot;UP&quot;
        }
    ],
    &quot;status&quot;: &quot;UP&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;/health/ready&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;json&quot; class=&quot;language-json hljs&quot;&gt;{
    &quot;checks&quot;: [
        {
            &quot;name&quot;: &quot;CustomGroup2ReadinessCheck&quot;,
            &quot;status&quot;: &quot;UP&quot;
        },
        {
            &quot;name&quot;: &quot;ReadinessHealthCheck&quot;,
            &quot;status&quot;: &quot;UP&quot;
        }
    ],
    &quot;status&quot;: &quot;UP&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Where this can come particularly handy is if you want to reuse predefined
readiness and liveness procedures for custom views or simplified processing. For
example, if you have several liveness procedures one of which is not essential
and takes a long time you may want to define a health group that will be excluding
the expensive liveness health check computation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We introduced the new experimental feature extending the MicroProfile Health 2.2
API called the Health Groups. This feature is available for use in the SmallRye
Health 2.2.0 (Quarkus 1.4.0) and later releases. In Quarkus, the health Groups are
already included in the &lt;code&gt;smallrye-health&lt;/code&gt; extension. If you wish to use in a
different container you need to add following dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot; class=&quot;language-xml hljs&quot;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;io.smallrye&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;smallrye-health&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;${version.io.smallrye.health}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;io.smallrye&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;smallrye-health-extension-api&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;${version.io.smallrye.health}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we want to test features that
we will eventually try to specify in MicroProfile, you can expect that if this
feature will be used in Quarkus you will eventually see it in the MicroProfile
Health specification. So if you are interested, please feel free to try it out,
test it, and report any issues or enhancements in
&lt;a href=&quot;https://github.com/smallrye/smallrye-health/issues&quot;&gt;our issue tracker&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Martin Stefanko</name><email>xstefank122@gmail.com</email></author><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 4.1</title><link href="https://www.smallrye.io/smallrye.github.io/blog/fault-tolerance-4-1/" rel="alternate" type="text/html" title="Fault Tolerance 4.1" /><published>2020-02-17T12:00:00+00:00</published><updated>2020-02-17T12:00:00+00:00</updated><id>https://www.smallrye.io/smallrye.github.io/blog/fault-tolerance-4-1</id><content type="html" xml:base="https://www.smallrye.io/smallrye.github.io/blog/fault-tolerance-4-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MicroProfile Fault Tolerance 2.1 was released just 2 weeks ago, and it didn&amp;#8217;t take us long to fully implement.
Today, we announce availability of SmallRye Fault Tolerance 4.1, a compliant implementation of MicroProfile Fault Tolerance 2.1.
Here&amp;#8217;s a list of the important changes in the specification:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;@Retry.retryOn&lt;/code&gt; and &lt;code&gt;abortOn&lt;/code&gt; attributes no longer ignore &lt;code&gt;Throwable.class&lt;/code&gt;, to be consistent with other annotations that also specify exceptions.
Only &lt;code&gt;@Retry&lt;/code&gt; had a requirement that &lt;code&gt;Throwable&lt;/code&gt; is to be ignored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Related to the previous item is that the specification now admits that throwing custom &lt;code&gt;Throwable&lt;/code&gt;s results in nonportable behavior.
Fortunately, the use cases for throwing something that isn&amp;#8217;t an &lt;code&gt;Exception&lt;/code&gt; (nor an &lt;code&gt;Error&lt;/code&gt;) should be very rare.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Also, the behavior was previously unspecified when the &lt;code&gt;@Retry.retryOn&lt;/code&gt; and &lt;code&gt;abortOn&lt;/code&gt; attributes overlap.
It is now specified that the &lt;code&gt;abortOn&lt;/code&gt; attribute &quot;wins&quot; over &lt;code&gt;retryOn&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;@CircuitBreaker.skipOn&lt;/code&gt; attribute was added, to complement the existing &lt;code&gt;failOn&lt;/code&gt; attribute.
When the attributes overlap, &lt;code&gt;skipOn&lt;/code&gt; &quot;wins&quot; over &lt;code&gt;failOn&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;@Fallback.applyOn&lt;/code&gt; and &lt;code&gt;skipOn&lt;/code&gt; attributes were also added.
When they overlap, &lt;code&gt;skipOn&lt;/code&gt; &quot;wins&quot; over &lt;code&gt;applyOn&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is now specified that during the &lt;code&gt;@Asynchronous&lt;/code&gt; method execution, the CDI request context is always active.
The specification previously did not require that.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release is also aligned with other SmallRye projects (Config and Metrics) that also recently released a new version in preparation of MicroProfile 3.3 platform release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy the new SmallRye Fault Tolerance, it is &lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/7204&quot;&gt;coming&lt;/a&gt; in the next Quarkus release!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 4.0</title><link href="https://www.smallrye.io/smallrye.github.io/blog/fault-tolerance-4-0/" rel="alternate" type="text/html" title="Fault Tolerance 4.0" /><published>2020-01-22T08:00:00+00:00</published><updated>2020-01-22T08:00:00+00:00</updated><id>https://www.smallrye.io/smallrye.github.io/blog/fault-tolerance-4-0</id><content type="html" xml:base="https://www.smallrye.io/smallrye.github.io/blog/fault-tolerance-4-0/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance&quot;&gt;SmallRye Fault Tolerance&lt;/a&gt; is our implementation of &lt;a href=&quot;https://github.com/eclipse/microprofile-fault-tolerance&quot;&gt;Eclipse MicroProfile Fault Tolerance&lt;/a&gt;.
It was originally based on &lt;a href=&quot;https://github.com/Netflix/Hystrix&quot;&gt;Hystrix&lt;/a&gt;, the Netflix library for latency and fault tolerance in distributed systems.
Lately, we realized that Hystrix is not the best fit for implementing MicroProfile Fault Tolerance, because Hystrix meshes all fault tolerance concerns into one, while MicroProfile Fault Tolerance describes mostly a layered architecture.
The MicroProfile Fault Tolerance specification also requires certain features that Hystrix intentionally doesn&amp;#8217;t provide; most importantly, the ability to interrupt threads that Hystrix itself didn&amp;#8217;t create.
Last but not least, Hystrix is in maintenance mode, and hasn&amp;#8217;t been actively developed for more than a year.
When we tried to update to latest Hystrix version, we even faced breaking changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have been talking on and off about removing Hystrix and using our own implementation of core fault tolerance strategies, one that would be better suited as a base for implementing MicroProfile Fault Tolerance, but only a few months ago did we finally start working on it.
Thanks to heroic work of &lt;a href=&quot;https://github.com/michalszynkiewicz&quot;&gt;Michał Szynkiewicz&lt;/a&gt;, the new implementation didn&amp;#8217;t take long to pass the entire MicroProfile Fault Tolerance TCK.
We have already released a first version of this new implementation, called 4.0.0.
Of course, that&amp;#8217;s not the end; in fact, it&amp;#8217;s just a beginning.
We should now have a better foundation to experiment with, and already have several ideas that we would like to explore and eventually propose to MicroProfile Fault Tolerance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, we&amp;#8217;ll take a brief look at how the new implementation works inside, what do you need to know as an integrator, and what are our plans for the future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;under_the_hood&quot;&gt;Under the hood&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s take a brief look at the core.
It is based on the idea of &lt;code&gt;FaultToleranceStrategy&lt;/code&gt;, which is an interface that looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;interface FaultToleranceStrategy&amp;lt;V&amp;gt; {
    V apply(InvocationContext&amp;lt;V&amp;gt; ctx) throws Exception;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;InvocationContext&lt;/code&gt; is a &lt;code&gt;Callable&lt;/code&gt; that represents the method invocation guarded by this fault tolerance strategy.
The fault tolerance strategy does its work around &lt;code&gt;ctx.call()&lt;/code&gt;.
It can catch exceptions, invoke &lt;code&gt;ctx.call()&lt;/code&gt; multiple times, invoke something else, etc.
As an example, let&amp;#8217;s consider this strategy, applicable to methods that return a &lt;code&gt;String&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;public class MyStringFallback implements FaultToleranceStrategy&amp;lt;String&amp;gt; {
    @Override
    public String apply(InvocationContext&amp;lt;String&amp;gt; ctx) {
        try {
            return ctx.call();
        } catch (Exception ignored) {
            return &quot;my string value&quot;;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a very simple fallback mechanism, which returns a pre-defined value in case of an exception.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the SmallRye Fault Tolerance codebase, you can find implementations of all the strategies required by MicroProfile Fault Tolerance: retry, fallback, timeout, circuit breaker or bulkhead.
Asynchronous invocation, delegated to a thread pool, is of course also supported.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When multiple fault tolerance strategies are supposed to be used to guard one method, they form a chain.
Continuing with our simple example, adding the ability to chain with another strategy would look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;public class MyStringFallback implements FaultToleranceStrategy&amp;lt;String&amp;gt; {
    private final FaultToleranceStrategy&amp;lt;String&amp;gt; delegate;

    public MyStringFallback(FaultToleranceStrategy&amp;lt;String&amp;gt; delegate) {
        this.delegate = delegate;
    }

    @Override
    public String apply(InvocationContext&amp;lt;String&amp;gt; ctx) {
        try {
            return delegate.apply(ctx);
        } catch (Exception ignored) {
            return &quot;my string value&quot;;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We see that one strategy delegates to another, passing the &lt;code&gt;InvocationContext&lt;/code&gt; along.
In fact, all the implementations in SmallRye Fault Tolerance are written like this: they expect to be used in a chain, so they take another &lt;code&gt;FaultToleranceStrategy&lt;/code&gt; to which they delegate.
But if all strategies have this form, when is &lt;code&gt;ctx.call()&lt;/code&gt; actually invoked?
Good question!
The ultimate &lt;code&gt;ctx.call()&lt;/code&gt; invocation is done by a special fault tolerance strategy which is called, well, &lt;code&gt;Invocation&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an example which uses real MicroProfile Fault Tolerance annotations, let&amp;#8217;s consider this method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@Retry(...)
@Timeout(...)
@Fallback(...)
public void doSomething() {
    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The chain of fault tolerance strategies will look roughly like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;Fallback(
    Retry(
        Timeout(
            Invocation(
                // ctx.call() will happen here
                // that will, in turn, invoke doSomething()
            )
        )
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The order in which the strategies are chained (or, in fact, nested) is specified by MicroProfile Fault Tolerance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In asynchronous invocations, especially those using &lt;code&gt;CompletionStage&lt;/code&gt;, it is a bit more complex, but the core idea is the same and the intuition you gained here should still apply.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please note that everything explained here is an implementation detail.
API stability for these interfaces and classes is &lt;em&gt;not&lt;/em&gt; guaranteed; we only mention them here to give you better understanding of the new implementation.
You will also want to understand this if you decide to contribute (pull requests are always welcome!).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;integration_concerns&quot;&gt;Integration concerns&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you integrate SmallRye Fault Tolerance to provide an implementation of MicroProfile Fault Tolerance, you should be aware of a few things.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance creates several thread pools (&lt;code&gt;ExecutorService&lt;/code&gt;s).
One for asynchronous invocations, one for watching timeouts, and then one for each threadpool-style bulkhead.
You might want to customize how these thread pools are created.
For example, if you integrate SmallRye Fault Tolerance into a Java EE application server, you probably want these thread pools to be managed.
We provide an SPI that you can implement for this exact purpose: &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/blob/master/implementation/fault-tolerance/src/main/java/io/smallrye/faulttolerance/ExecutorFactory.java&quot;&gt;&lt;code&gt;ExecutorFactory&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Size of these thread pools can be configured using the following configuration properties:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;io.smallrye.faulttolerance.globalThreadPoolSize&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Size of the thread pool for asynchronous invocations.
Does not include bulkhead thread pools.
Defaults to 100.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;io.smallrye.faulttolerance.timeoutExecutorThreads&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Size of the thread pool for watching timeouts.
Defaults to 5.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Optional integration with &lt;a href=&quot;https://github.com/eclipse/microprofile-context-propagation&quot;&gt;MicroProfile Context Propagation&lt;/a&gt; is present, in a separate artifact.
Optional integration with &lt;a href=&quot;https://github.com/eclipse/microprofile-opentracing&quot;&gt;MicroProfile OpenTracing&lt;/a&gt; is also present, but it&amp;#8217;s currently built on top of the Context Propagation integration.
We&amp;#8217;re looking to potentially remove that dependency, so that OpenTracing integration is also possible if you&amp;#8217;re not yet ready to incorporate Context Propagation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;future_outlook&quot;&gt;Future outlook&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we mentioned above, this is not an end.
Here&amp;#8217;s a short list of what we want to look at.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First of all, the 4.0 version implements MicroProfile Fault Tolerance 2.0.
We will of course continue implementing subsequent specification versions, starting with 2.1, which should be released soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently, MicroProfile Fault Tolerance specifies that &lt;code&gt;@Asynchronous&lt;/code&gt; invocation always means delegating to a thread pool.
We&amp;#8217;d like to investigate what would it take to support asynchronous invocation on an event loop, such as one provided by Vert.x.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;d like to add a &lt;a href=&quot;https://github.com/eclipse/microprofile-fault-tolerance/issues/475&quot;&gt;fail-fast strategy&lt;/a&gt;, tentatively called &lt;code&gt;@FailFast&lt;/code&gt;.
This is useful to prevent expensive calls when you know it doesn&amp;#8217;t make sense to do them.
One instance of this idea is the circuit breaker, which decides automatically based on rate of errors.
Here, the decision would be entirely yours.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;d also like to add &lt;a href=&quot;https://github.com/eclipse/microprofile-fault-tolerance/issues/474&quot;&gt;adaptive concurrency limiters&lt;/a&gt;, tentatively called &lt;code&gt;@AdaptiveBulkhead&lt;/code&gt;.
Bulkheads, as they exist in MicroProfile Fault Tolerance now, are defined statically.
That is, you need to know upfront what is the maximum concurrency level.
This is no longer enough in the cloud world, where services are scaled up and down dynamically.
It is possible to determine the concurrency limits dynamically, by observing the invocation latencies and error rates.
Netflix has been doing that in their &lt;a href=&quot;https://github.com/Netflix/concurrency-limits&quot;&gt;concurrency limits&lt;/a&gt; project, and we can certainly take a lot of inspiration from them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some of the items above are about providing a new API.
The idea is that we would prototype that API in SmallRye and if it proves worthy, we&amp;#8217;d work to specify it in MicroProfile.
For that reason, we would probably mark these prototypes as experimental API, and if they get specified in MicroProfile, we&amp;#8217;d rapidly deprecate and remove them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are also some implementation aspects that we&amp;#8217;d like to finetune.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The metrics collection and configuration handling code mostly comes from the old implementation, and is due for serious refactoring.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As mentioned above, each threadpool-style bulkhead currently gets a fresh thread pool.
This is quite inefficient, and can be significantly improved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The current implementation includes a special strategy called &lt;code&gt;Tracer&lt;/code&gt;, which can be put in between any two other strategies to print useful information about when and on which thread is the subsequent strategy invoked.
This proved very useful in debugging, but using it requires manual changes and rebuild of the entire codebase.
We want to add comprehensive debug and trace logging that is always present, so that you can easily enable it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And there&amp;#8217;s a lot more, for sure.
As we said above, this is just a beginning!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">SmallRye Innovation for Eclipse MicroProfile</title><link href="https://www.smallrye.io/smallrye.github.io/blog/innovation/" rel="alternate" type="text/html" title="SmallRye Innovation for Eclipse MicroProfile" /><published>2019-11-27T19:00:00+00:00</published><updated>2019-11-27T19:00:00+00:00</updated><id>https://www.smallrye.io/smallrye.github.io/blog/innovation</id><content type="html" xml:base="https://www.smallrye.io/smallrye.github.io/blog/innovation/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://smallrye.io&quot;&gt;SmallRye&lt;/a&gt; implements &lt;a href=&quot;https://microprofile.io/&quot;&gt;Eclipse MicroProfile&lt;/a&gt; specifications for use within any runtime.
Currently, SmallRye is included in &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt;,
&lt;a href=&quot;https://thorntail.io&quot;&gt;Thorntail&lt;/a&gt;, &lt;a href=&quot;https://wildfly.org&quot;&gt;WildFly&lt;/a&gt;,
and the reactive implementations are part of &lt;a href=&quot;https://openliberty.io/&quot;&gt;Open Liberty&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s great, but that&amp;#8217;s only implementing what&amp;#8217;s been defined by a specification.
Does &lt;a href=&quot;https://smallrye.io&quot;&gt;SmallRye&lt;/a&gt; only implement the specifications &quot;&lt;em&gt;as is&lt;/em&gt;&quot;?
How do new ideas get added to &lt;a href=&quot;https://microprofile.io/&quot;&gt;MicroProfile&lt;/a&gt;,
either as new specifications or changes to an existing specification?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Questions like these,
and others like them,
are what I hear often from those not familiar with exactly how &lt;a href=&quot;https://microprofile.io/&quot;&gt;MicroProfile&lt;/a&gt; operates.
Unlike how the JCP typically operated in the past when defining Java EE specifications,
&lt;a href=&quot;https://microprofile.io/&quot;&gt;MicroProfile&lt;/a&gt; takes a very different approach.
Bean Validation took a similar approach as &lt;a href=&quot;https://microprofile.io/&quot;&gt;MicroProfile&lt;/a&gt;.
In &lt;a href=&quot;https://microprofile.io/&quot;&gt;MicroProfile&lt;/a&gt; we define specifications based on existing implementations and usage within projects,
as it offers a greater indication that what&amp;#8217;s being proposed is useful to developers.
It&amp;#8217;s much harder to create an API from ideas and have it be useful
than to define a specification based on an already working implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How does this relate to how &lt;a href=&quot;https://smallrye.io&quot;&gt;SmallRye&lt;/a&gt; develops implementations?
Since its creation &lt;a href=&quot;https://smallrye.io&quot;&gt;SmallRye&lt;/a&gt; was purposefully focused on implementing the &lt;a href=&quot;https://microprofile.io/&quot;&gt;MicroProfile&lt;/a&gt; specifications,
while seeking to improve the specifications and TCKs when issues were found.
Having reached a point where the implementations are stable and easily kept in line with modifications to existing specifications,
it frees those working on the project to shift our focus to innovation!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What type of innovation are we talking about?
In theory, it could be absolutely anything.
In practice, we&amp;#8217;re not proposing a complete free for all, as that leads to churn without results.
We have a few initiatives that are underway where we are beginning to innovate with &lt;a href=&quot;https://microprofile.io/&quot;&gt;MicroProfile&lt;/a&gt;.
We&amp;#8217;ve begun work on an entirely new implementation for Fault Tolerance, see &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues/102&quot;&gt;here&lt;/a&gt;,
which aims to be reactive friendly while still enabling the same functionality for imperative programming.
In &lt;a href=&quot;https://github.com/smallrye/smallrye-config&quot;&gt;SmallRye Config&lt;/a&gt; we will be investigating how to implement support for
using a pre captured configuration during the creation of later &lt;code&gt;ConfigSource&lt;/code&gt;s and &lt;code&gt;ConfigSourceProvider&lt;/code&gt;s,
allowing configuration to be used to create latter stage configuration instances.
There are also other innovations underway within the reactive sphere of &lt;a href=&quot;https://smallrye.io&quot;&gt;SmallRye&lt;/a&gt; that we intend to announce soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to innovation within &lt;a href=&quot;https://smallrye.io&quot;&gt;SmallRye&lt;/a&gt; projects,
we&amp;#8217;re in the process of accepting the donation from the &lt;a href=&quot;https://github.com/microprofile-extensions&quot;&gt;MicroProfile Extensions&lt;/a&gt; project.
The &lt;a href=&quot;https://github.com/microprofile-extensions&quot;&gt;MicroProfile Extensions&lt;/a&gt; project includes many new &lt;code&gt;ConfigSource&lt;/code&gt; and &lt;code&gt;Converter&lt;/code&gt; types
that will be added to &lt;a href=&quot;https://smallrye.io&quot;&gt;SmallRye&lt;/a&gt;.
A big thanks to &lt;a href=&quot;https://github.com/phillip-kruger&quot;&gt;Phillip&lt;/a&gt; and &lt;a href=&quot;https://github.com/derekm&quot;&gt;Derek&lt;/a&gt; for agreeing to this and pushing it forward.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All this innovation in &lt;a href=&quot;https://smallrye.io&quot;&gt;SmallRye&lt;/a&gt; is great,
but what does that mean for &lt;a href=&quot;https://microprofile.io/&quot;&gt;MicroProfile&lt;/a&gt; specifications?
Do they have these new innovations as well?
In the short term, no they wouldn&amp;#8217;t.
The medium to longer-term goal for any innovation created in &lt;a href=&quot;https://smallrye.io&quot;&gt;SmallRye&lt;/a&gt; is for it to be proposed to existing
or new &lt;a href=&quot;https://microprofile.io/&quot;&gt;MicroProfile&lt;/a&gt; specifications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;d like to contribute to &lt;a href=&quot;https://smallrye.io&quot;&gt;SmallRye&lt;/a&gt; and help us deliver innovation to &lt;a href=&quot;https://microprofile.io/&quot;&gt;MicroProfile&lt;/a&gt;,
come by our &lt;a href=&quot;https://groups.google.com/d/forum/smallrye&quot;&gt;forum&lt;/a&gt; and take a look at the issues in any of the projects on &lt;a href=&quot;https://github.com/smallrye&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ken Finnigan</name><email>ken@kenfinnigan.me</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">SmallRye on GraalVM with Quarkus!</title><link href="https://www.smallrye.io/smallrye.github.io/blog/graalvm-quarkus/" rel="alternate" type="text/html" title="SmallRye on GraalVM with Quarkus!" /><published>2019-03-07T19:00:00+00:00</published><updated>2019-03-07T19:00:00+00:00</updated><id>https://www.smallrye.io/smallrye.github.io/blog/graalvm-quarkus</id><content type="html" xml:base="https://www.smallrye.io/smallrye.github.io/blog/graalvm-quarkus/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Marvel at SmallRye on GraalVM with Quarkus!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you haven&amp;#8217;t heard already, today &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt; was released!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt; is a new open source project for &lt;em&gt;Supersonic Subatomic Java&lt;/em&gt;!
Bringing a Kubernetes Native Java stack tailored for GraalVM and OpenJDK Hotspot,
crafted from the best of breed Java libraries and standards.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additional details of Quarkus are on the &lt;a href=&quot;https://quarkus.io/&quot;&gt;website&lt;/a&gt;
and announcement &lt;a href=&quot;https://developers.redhat.com/blog/2019/03/07/quarkus-next-generation-kubernetes-native-java-framework&quot;&gt;blog&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How is the announcement of &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt; important for SmallRye?
&lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt; has extensions for each of the SmallRye implementations,
enabling a user to create a &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt; application using SmallRye,
and thus &lt;a href=&quot;https://microprofile.io/&quot;&gt;Eclipse MicroProfile&lt;/a&gt;.
You can now create an application with amazingly fast boot time,
and incredibly low RSS memory (not just the heap size!),
with &lt;a href=&quot;https://microprofile.io/&quot;&gt;Eclipse MicroProfile&lt;/a&gt; APIs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We look forward to hearing how developers enjoy the speed and memory performance in containers!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ken Finnigan</name><email>ken@kenfinnigan.me</email></author><category term="announcement" /><category term="quarkus" /></entry><entry><title type="html">SmallRye adds MicroProfile 2.2 support</title><link href="https://www.smallrye.io/smallrye.github.io/blog/microprofile-2-2/" rel="alternate" type="text/html" title="SmallRye adds MicroProfile 2.2 support" /><published>2019-03-06T19:00:00+00:00</published><updated>2019-03-06T19:00:00+00:00</updated><id>https://www.smallrye.io/smallrye.github.io/blog/microprofile-2-2</id><content type="html" xml:base="https://www.smallrye.io/smallrye.github.io/blog/microprofile-2-2/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye now has all implementations passing the TCKs for MicroProfile 2.2 specifications!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The full list of completed implementations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Config 1.3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fault Tolerance 2.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Health 1.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JWT 1.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metrics 1.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenAPI 1.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenTracing 1.3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REST Client 1.2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out the &lt;a href=&quot;/projects&quot;&gt;Projects page&lt;/a&gt; for all the details!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks to everyone from the community that enabled us to implement the specification so fast!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ken Finnigan</name><email>ken@kenfinnigan.me</email></author><category term="announcement" /><category term="microprofile" /></entry></feed>